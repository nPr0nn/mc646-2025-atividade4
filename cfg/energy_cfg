digraph clusterenergy_cfg {
	graph [label=energy_cfg]
	1 [label="from datetime import datetime
from src.energy.DeviceSchedule import DeviceSchedule
from src.energy.EnergyManagementResult import EnergyManagementResult
\"\"\"Um sistema para gerenciar inteligentemente o consumo de energia.\"\"\"
def manage_energy(self, initial_device_status: dict[str, bool],...
"]
	subgraph clustermanage_energy {
		graph [label=manage_energy]
		3 [label="device_status = initial_device_status.copy()
current_energy_saving_mode = energy_saving_mode
current_temp_regulation_active = temperature_regulation_active
if current_price > price_threshold:
"]
		"3_calls" [label="initial_device_status.copy" shape=box]
		3 -> "3_calls" [label=calls style=dashed]
		4 [label="current_energy_saving_mode = True
"]
		5 [label="if current_energy_saving_mode:
"]
		6 [label="for device, priority in device_priorities.items():
"]
		8 [label="if priority > 1:
"]
		10 [label="device_status[device] = False
"]
		10 -> 6 [label=""]
		8 -> 10 [label="priority > 1"]
		8 -> 6 [label="(priority <= 1)"]
		6 -> 8 [label="device_priorities.items()"]
		7 [label="if current_time.hour >= 23 or current_time.hour < 6:
"]
		12 [label="for device in device_priorities:
"]
		14 [label="if device not in ('Security', 'Refrigerator'):
"]
		16 [label="device_status[device] = False
"]
		16 -> 12 [label=""]
		14 -> 16 [label="device not in ('Security', 'Refrigerator')"]
		14 -> 12 [label="(device in ('Security', 'Refrigerator'))"]
		12 -> 14 [label=device_priorities]
		13 [label="if temperature_regulation_active:
"]
		18 [label="if current_temperature < desired_temperature_range[0]:
"]
		20 [label="if 'Heating' in device_status:
"]
		27 [label="device_status['Heating'] = True
"]
		19 [label="devices_were_on = any(initial_device_status.values())
if total_energy_used_today >= energy_usage_limit:
"]
		"19_calls" [label=any shape=box]
		19 -> "19_calls" [label=calls style=dashed]
		29 [label="devices_were_on = False
low_prio_devices = sorted([d for d, p in device_priorities.items() if p > 1
    ], key=lambda d: device_priorities[d], reverse=True)
"]
		"29_calls" [label=sorted shape=box]
		29 -> "29_calls" [label=calls style=dashed]
		31 [label="for device in low_prio_devices:
"]
		32 [label="if device_status.get(device, False):
"]
		34 [label="device_status[device] = False
"]
		34 -> 31 [label=""]
		32 -> 34 [label="device_status.get(device, False)"]
		32 -> 31 [label="(not device_status.get(device, False))"]
		31 -> 32 [label=low_prio_devices]
		33 [label="high_prio_devices = sorted([d for d, p in device_priorities.items() if p <=
    1], key=lambda d: device_priorities[d], reverse=True)
"]
		"33_calls" [label=sorted shape=box]
		33 -> "33_calls" [label=calls style=dashed]
		36 [label="for device in high_prio_devices:
"]
		37 [label="if device_status.get(device, False):
"]
		39 [label="device_status[device] = False
"]
		39 -> 36 [label=""]
		37 -> 39 [label="device_status.get(device, False)"]
		37 -> 36 [label="(not device_status.get(device, False))"]
		36 -> 37 [label=high_prio_devices]
		30 [label="for schedule in scheduled_devices:
"]
		41 [label="if schedule.scheduled_time.hour == current_time.hour and schedule.scheduled_time.minute == current_time.minute:
"]
		43 [label="device_status[schedule.device_name] = True
"]
		43 -> 30 [label=""]
		41 -> 43 [label="schedule.scheduled_time.hour == current_time.hour and schedule.scheduled_time.minute == current_time.minute"]
		41 -> 30 [label="(not (schedule.scheduled_time.hour == current_time.hour and schedule.
    scheduled_time.minute == current_time.minute))"]
		30 -> 41 [label=scheduled_devices]
		42 [label="return EnergyManagementResult(device_status, current_energy_saving_mode,
    current_temp_regulation_active, total_energy_used_today, devices_were_on)
"]
		30 -> 42 [label=""]
		36 -> 30 [label=""]
		33 -> 36 [label=""]
		31 -> 33 [label=""]
		29 -> 31 [label=""]
		19 -> 29 [label="total_energy_used_today >= energy_usage_limit"]
		19 -> 30 [label="(total_energy_used_today < energy_usage_limit)"]
		27 -> 19 [label=""]
		20 -> 27 [label="'Heating' in device_status"]
		20 -> 19 [label="('Heating' not in device_status)"]
		18 -> 20 [label="current_temperature < desired_temperature_range[0]"]
		22 [label="if current_temperature > desired_temperature_range[1]:
"]
		23 [label="if 'Cooling' in device_status:
"]
		25 [label="device_status['Cooling'] = True
"]
		25 -> 19 [label=""]
		23 -> 25 [label="'Cooling' in device_status"]
		23 -> 19 [label="('Cooling' not in device_status)"]
		22 -> 23 [label="current_temperature > desired_temperature_range[1]"]
		22 -> 19 [label="(current_temperature <= desired_temperature_range[1])"]
		18 -> 22 [label="(current_temperature >= desired_temperature_range[0])"]
		13 -> 18 [label=temperature_regulation_active]
		13 -> 19 [label="(not temperature_regulation_active)"]
		12 -> 13 [label=""]
		7 -> 12 [label="current_time.hour >= 23 or current_time.hour < 6"]
		7 -> 13 [label="(not (current_time.hour >= 23 or current_time.hour < 6))"]
		6 -> 7 [label=""]
		5 -> 6 [label=current_energy_saving_mode]
		5 -> 7 [label="(not current_energy_saving_mode)"]
		4 -> 5 [label=""]
		3 -> 4 [label="current_price > price_threshold"]
		3 -> 5 [label="(current_price <= price_threshold)"]
	}
}
